name: Lint, Format, and Test Code
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-format-test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: .  # Добавляем корень проекта в PYTHONPATH
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==24.8.0 flake8==7.1.1 pylint==3.3.1 mypy==1.11.2 pytest==8.3.3 pytest-asyncio==0.24.0 pytest-mock==3.14.0 pytest-cov==5.0.0 aiogram==2.25.2 torch==2.0.0 torchvision==0.15.1 numpy==1.26.4 Pillow opencv-python realesrgan basicsr

      - name: Create pyproject.toml
        run: |
          echo "[tool.pytest.ini_options]" > pyproject.toml
          echo "asyncio_default_fixture_loop_scope = \"function\"" >> pyproject.toml
          echo "filterwarnings = [" >> pyproject.toml
          echo "  \"ignore::UserWarning:torchvision.transforms.functional_tensor\"," >> pyproject.toml
          echo "  \"ignore::DeprecationWarning:basicsr.metrics.niqe\"" >> pyproject.toml
          echo "]" >> pyproject.toml
          echo "[tool.mypy]" >> pyproject.toml
          echo "ignore_missing_imports = true" >> pyproject.toml
          echo "[tool.pylint.messages_control]" >> pyproject.toml
          echo "disable = \"missing-docstring,too-many-locals,too-many-arguments\"" >> pyproject.toml

      - name: Create .flake8
        run: |
          echo "[flake8]" > .flake8
          echo "ignore = E203, W503" >> .flake8
          echo "max-line-length = 88" >> .flake8

      - name: Run Black (format)
        run: black .

      - name: Run Black (check)
        run: black --check .

      - name: Run Flake8
        run: flake8 .

      - name: Run Pylint
        run: pylint *.py

      - name: Run Mypy
        run: mypy .

      - name: Run Tests
        run: pytest tests/ -v --asyncio-mode=auto --cov=app_v3 --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}  # Опционально, если требуется

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Apply Black formatting and lint fixes [skip ci]"
            git push origin HEAD
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
